#include <iostream>
#include <cstring>
using namespace std;

const int MAX=10;
class dictionary;
class node
{
 string identifier,scope;
 int lineNo;
 node *next;
public:
 friend class SymbolTable;
 node()
 {
  next=NULL;
 }
 node(string key,string value,int lineNo)
 {
  this->identifier=key;
  this->scope=value;
  this->lineNo=lineNo;
  next=NULL;
 }
};

class SymbolTable
{
 node *head[MAX];
public:
 SymbolTable()
{
  for(int i=0;i<MAX;i++)
   head[i]=NULL;
}
 int hashf(string lexeme);
 void insert(string lexeme,string scope,int lineno);
 void find(string lexeme);
 bool deleteRecord(string lexeme);
 void modify(string lexeme);
 void display();
};


int SymbolTable::hashf(string lexeme)
{
 int asciiSum=0;
 for(int i=0;i<lexeme.length();i++)
 {
  asciiSum=asciiSum+lexeme[i];
 }
 return (asciiSum%10);
}

void SymbolTable::insert(string lexeme,string scope,int lineno)
{
 int index=hashf(lexeme);
 node *p=new node(lexeme,scope,lineno);

 if(head[index]==NULL)
 {
  head[index]=p;
 }
 else
 {
  node *start=head[index];
  while(start->next!=NULL)
   start=start->next;
  start->next=p;

 }
 cout<<endl<<lexeme<<"Lexeme inserted into Symbol Table.";
}
void SymbolTable:: display()
{
 cout<<"\nIndex\tlexeme\tScope\tLineno";
 for(int i=0;i<10;i++)
 {
  node *start=head[i];
  if(start==NULL)
   cout<<"\n";
  while(start!=NULL)
  {
   cout<<"\n"<<i<<" :\t"<<start->identifier<<"\t"<<start->scope<<"\t"<<"\t"<<start->lineNo;
   start=start->next;
  }
 }
}

void SymbolTable::find(string lexeme)
{
 int index=hashf(lexeme);
 int flag=0;
 node *start=head[index];
 while(start!=NULL)
 {
  if(start->identifier==lexeme)
  {
   //start->print();
   flag=1;
   break;

  }
  start=start->next;
 }
 if(flag==1)
  cout<<"Lexeme Is  present.";
 else
  cout<<"Lexeme Is not present.";
}

void SymbolTable::modify(string lexeme)
{
 int index=hashf(lexeme);
 node *start=head[index];
 int flag=0;
 while(start!=NULL)
 {
  if(start->identifier==lexeme)
  {
   cout<<lexeme<<" is present\n";
   cout<<"Enter Scope of the lexeme: ";
   cin>>(start->scope);
   cout<<"Enter Line Number: ";
   cin>>(start->lineNo);
   flag=1;
  }start=start->next;
 }
 if(flag==1)
  cout<<"Symbol Table has been modified";
 else
  cout<<"Symbol Table has been not modified";

}

bool SymbolTable::deleteRecord(string lexeme)
{
 int index=hashf(lexeme);
 node *tmp=head[index];
 node *par=head[index];
 if(tmp==NULL) //if no identifier is present at that index
 {
  return false;
 }
 if(tmp->identifier==lexeme && tmp->next==NULL)//only one identifier is present
 {
  head[index]=NULL;
  delete tmp;
  return true;
 }
 //tmp=tmp->next;
 while(tmp->identifier!=lexeme && tmp->next!=NULL)
 {
  par=tmp;
  tmp=tmp->next;
 }
 if(tmp->identifier==lexeme&&tmp->next!=NULL)
 {

if(par-> identifier ==tmp-> identifier)
          {
              head[index]=tmp->next;
          }
          else
          {
            par->next=tmp->next;
            tmp->next=NULL;
          }

  delete tmp;
  return true;
 }
 else //delete at end
 {
  par->next=NULL;
  tmp->next=NULL;
  delete tmp;
  return true;
 }
 return false;
}



int main() {
 SymbolTable  st;
 int choice,lineno;
 string lexeme,scope,type;
 do
 {
  cout<<"\n**** SYMBOL_TABLE ****\n"
    <<"1.Inserting the Identifier\n"
    <<"2.Finding the Identifier\n"
    <<"3.Deleting the Identifier\n"
    <<"4.Modifying the Attributes\n"
    <<"5.Display the Symbol Table \n"
    <<"Enter Your Choice here :";
  cin>>choice;
  switch(choice)
  {
  case 1:
   cout<<"Enter Identifier's Name: ";
   cin>>lexeme;
   cout<<"Enter Scope of lexeme : ";
   cin>>scope;
   cout<<"Enter Line Number : ";
   cin>>lineno;
   st.insert(lexeme,scope,lineno);
   break;
  case 2:
   cout<<"Enter Identifier to Search: ";
   cin>>lexeme;
   st.find(lexeme);
   break;
  case 3:
   cout<<"Enter Identifier to Delete: ";
   cin>>lexeme;
   if(st.deleteRecord(lexeme))
    cout<<" The stored lexeme is deleted.";
   else
   {
    cout<<"\nFailed to delete the lexeme "<<lexeme;
   }
   break;
  case 4:
   cout<<"Enter Identifier to Modify: ";
   cin>>lexeme;
   st.modify(lexeme);
   break;
  case 5:
   cout<<"**Symbol Table**";
   st.display();
   break;
  default:
   cout<<"\nWrong Choice.";
  }

 }while(choice!=0);

 return 0;
}
